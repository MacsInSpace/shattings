
" Override default options
set nocompatible	" we want vim's features, not stupid vi compatiblity
set ruler		" shows ruler at the bottom of the screen
set bs=2		" allow backspacing over everything in insert mode
set tabstop=4		" Set tabs to 4 spaces
set autoindent		" we want to autoindent
set sts=4 sw=4 ts=4
"set sts=4 sw=4 ts=8 et

runtime! ftplugin/man.vim

runtime! plist.vim

set number	" to show line numbers
set wrap	" enable line wrapping

let c_space_errors=1 " make blank spaces at EOL red

"set clipboard=unnamed

" check for underlying system - needed for clipboard
let uname = substitute(system("uname"),"\n","","g")

set nocp
filetype plugin on

set showcmd		" Show (partial) command in status line

" Those 2 are really useful, but they may confuse unsuspecting users -- Marc
set hlsearch		" Switch on syntax highlighting.
set incsearch		" show matches on the fly

" Newer vims let you paste without holding shift, so let's make this a default
"set mouse=a		" Use mouse to select and point 
			" (use shift+click to get old cut/paste behavior)
set ignorecase		" for pattern machine
set smartcase		" Except when a mix of case is given
set exrc
set secure

set swapsync=sync	" the swap is synced with sync, not fsync
set updatecount=20	" Number of characters typed before doing an update
set updatetime=500	" Number of milliseconds before doing an update
set history=100		" Number of history commands to remember
set viminfo='50,\"200	" read/write a .viminfo file, remember filemarks for 50
			" files and store 200 lines of registers

"set confirm		" To get a dialog when a command fails
"set titlestring=It\ feels\ good\ to\ be\ using\ vim
"set titleold=Vim\ Rules.\ Please\ come\ again\ :-)


" For debugging
"set verbose=9

" If bash is called sh on the system, define this
"let bash_is_sh=1

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc



"
" Key mappings
"

" Key mappings for par (text reformatting)
vmap  !par -w76 -gjq -dh -p3
vmap X !par -w76 -gjq -p2 -dh<CR>
vmap F !par -w76 -gjq<CR>
vmap f !par -w80<CR>
imap  :set invpaste<CR>a
map  :set invpaste<CR>o

" So what, I can't type...
nmap :W :w
nmap :X :x
nmap :Q :q

" For Amy :-) (without this, PHP editing in a .html file is painful) -- Marc
"nmap <F6> :set noai<CR>:syntax off<CR>:so /etc/vim/unhtml.vim<CR>:set tw=0<CR>
" Switches match highlighting on and off
"nmap <F7> :set hls!<CR>

" Leaves highlighting off but clears the search pattern
":map <F8>  /^<CR>

"set pastetoggle=<F9>

" Call the external spell module (with uses ispell)
" so /etc/vim/vimspell.vim

" Enable and disable highlighted spell checking
"map <F10> :so /etc/vim/engspchk.vim<CR>
"map <F12> :hi link BadWord none<CR>




" Move cursor by lines on *screen* instead of lines in *file*
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

"
" Autoload commands
"


" Default (global) group
" Remove all autocommands
au!
au BufReadPre * set sw=4 tw=0 sts=4 nosm nocindent cinkeys& comments& formatoptions&
"au BufReadPost * 


augroup mail
  " Remove all mail autocommands
"  au!

  " If you wonder, the big regexes are for matching temp files from cvs
  au BufRead .followup,.article,.letter,/tmp/snd*,/tmp/mutt*,/tmp/moder*,/var/tmp/[a-z][a-z][a-z][a-z][0-9][0-9][0-9]*,/tmp/[0-9][0-9][0-9][0-9][0-9][a-z][a-z][a-z] set formatoptions=tcqro2 comments=n:>,n::,n:»,n:] tw=76 autoindent
augroup END


augroup html
  " Remove all html autocommands
 " au!

  au BufRead *.shtml,*.html,*.htm set tw=80 formatoptions=tcqro2 autoindent

  " Show default HTML file when new.
"  au BufNewFile *.shtml,*.html,*.htm 0r /etc/vim/skeleton.html

  " Add HTML menu
"  au BufEnter *.shtml,*.html,*.htm so /etc/vim/html.vim
"  au BufLeave *.shtml,*.html,*.htm so /etc/vim/unhtml.vim

  " Setup browser to display when writing files
  "au BufWritePost *.shtml,*.html,*.htm !netscape -remote 'openFile(%:p)'
augroup END


augroup cprog
  " Remove all cprog autocommands
"  au!

  au BufRead *.cpp,*.c,*.h set formatoptions=croq sm sw=4 sts=4 cindent comments=sr:/*,mb:*,el:*/,:// | if file_readable("tags.vim") | so tags.vim | endif
augroup END


augroup perl
  " Remove all perl autocommands
"  au!

  au BufReadPre *.pl,*.pm set formatoptions=croq sm sw=4 sts=4 cindent cinkeys='0{,0},!^F,o,O,e' " tags=./tags,tags,~/devel/tags,~/devel/CVS/bin/contrib/tags
  " au BufReadPost */CVS/lib/perl5/netapp/*.pm so ~/devel/CVS/bin/contrib/tags.vim
  " The default syntax highlight syncing scheme is too slow (which makes
  " backwards scrolling very slow), so we reset it to something faster
  " au BufReadPost *.pm,*.pl syntax sync clear | syntax sync lines=30
augroup END


augroup python
  " Remove all python autocommands
"  au!

  au BufReadPre *.py set formatoptions=croq sm sw=4 sts=4 cindent cinkeys='0{,0},!^F,o,O,e'
augroup END


augroup shell
  " Remove all shell autocommands
"  au!

  au BufRead profile,bashrc,.profile,.bashrc,.bash_*,.kshrc,*.sh,*.ksh,*.bash,*.env,.login,.cshrc,*.csh,*.tcsh,.z*,zsh*,zlog* set formatoptions=croq sm sw=4 sts=4 cindent cinkeys='0{,0},!^F,o,O,e'
augroup END


" Also, support editing of gzip-compressed files. DO NOT REMOVE THIS!
" This is also used when loading the compressed helpfiles.
augroup gzip
  " Remove all gzip autocommands
  au!

  " Enable editing of gzipped files
  "	  read:	set binary mode before reading the file
  "		uncompress text in buffer after reading
  "	 write:	compress file after writing
  "	append:	uncompress file, append, compress file
  autocmd BufReadPre,FileReadPre	*.gz set bin
  autocmd BufReadPre,FileReadPre	*.gz let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost	*.gz '[,']!gunzip
  autocmd BufReadPost,FileReadPost	*.gz set nobin
  autocmd BufReadPost,FileReadPost	*.gz let &ch = ch_save|unlet ch_save
  " Old vims use this
  "autocmd BufReadPost,FileReadPost	*.gz execute ":doautocmd BufReadPost " . %:r
  autocmd BufReadPost,FileReadPost	*.gz execute ":doautocmd BufReadPost " . expand("%:r")

  autocmd BufWritePost,FileWritePost	*.gz !mv <afile> <afile>:r
  autocmd BufWritePost,FileWritePost	*.gz !gzip <afile>:r

  autocmd FileAppendPre			*.gz !gunzip <afile>
  autocmd FileAppendPre			*.gz !mv <afile>:r <afile>
  autocmd FileAppendPost		*.gz !mv <afile> <afile>:r
  autocmd FileAppendPost		*.gz !gzip <afile>:r
augroup END

augroup bzip2
  " Remove all bzip2 autocommands
  au!

  " Enable editing of bzipped files
  "       read: set binary mode before reading the file
  "             uncompress text in buffer after reading
  "      write: compress file after writing
  "     append: uncompress file, append, compress file
  autocmd BufReadPre,FileReadPre        *.bz2 set bin
  autocmd BufReadPre,FileReadPre        *.bz2 let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost      *.bz2 set cmdheight=2|'[,']!bunzip2
  " Old vims use this
  "autocmd BufReadPost,FileReadPost      *.bz2 set cmdheight=1 nobin|execute ":doautocmd BufReadPost " . %:r
  autocmd BufReadPost,FileReadPost      *.bz2 set cmdheight=1 nobin|execute ":doautocmd BufReadPost " . expand("%:r")
  autocmd BufReadPost,FileReadPost      *.bz2 let &ch = ch_save|unlet ch_save

  autocmd BufWritePost,FileWritePost    *.bz2 !mv <afile> <afile>:r
  autocmd BufWritePost,FileWritePost    *.bz2 !bzip2 <afile>:r

  autocmd FileAppendPre                 *.bz2 !bunzip2 <afile>
  autocmd FileAppendPre                 *.bz2 !mv <afile>:r <afile>
  autocmd FileAppendPost                *.bz2 !mv <afile> <afile>:r
  autocmd FileAppendPost                *.bz2 !bzip2 -9 --repetitive-best <afile>:r
augroup END

" Converts binary plists as XML plists.
"if uname == "Darwin"
"augroup plist
  
"  autocmd BufReadPre,FileReadPre        *.plist set bin
"  autocmd BufReadPre,FileReadPre        *.plist let ch_save = &ch|set ch=2
"  autocmd BufReadPost,FileReadPost      *.plist set cmdheight=2|'[,']!plutil -convert xml1 -o - -

" TODO: Check plist formatting is correct before saving!


"  autocmd BufReadPost,FileReadPost      *.plist set cmdheight=1 nobin|execute ":doautocmd BufReadPost " . expand("%:r")
"  autocmd BufReadPost,FileReadPost      *.plist let &ch = ch_save|unlet ch_save

"  autocmd BufWritePost,FileWritePost    *.plist !mv <afile> <afile>:r
"  autocmd BufWritePost,FileWritePost    *.plist !bzip2 <afile>:r

"  autocmd FileAppendPre                 *.bz2 !bunzip2 <afile>
"  autocmd FileAppendPre                 *.bz2 !mv <afile>:r <afile>
"  autocmd FileAppendPost                *.bz2 !mv <afile> <afile>:r
"  autocmd FileAppendPost                *.bz2 !bzip2 -9 --repetitive-best <afile>:r

"augroup END
"endif

if uname == "Darwin"
  nmap <F6> :.w !pbcopy<CR><CR>
  vmap <F6> :w !pbcopy<CR><CR>
  nmap <F7> :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
  imap <F7> <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
elseif uname == "Linux"
  vmap <F6> :!xclip -f -sel clip<CR>
  map <F7> :-1r !xclip -o -sel clip<CR>
endif


" This lets me override syntax defaults
" Usually, one does not need to override this file
" let mysyntaxfile = "/etc/vim/vim_mysyntax"
"let myfiletypefile = "/etc/vim/vim_myfiletypes"
"let myscriptsfile = "/etc/vim/vim_myscripts"

"
" Colors
"

" XTerm colors
" It used to be 16, but it seems to trigger a bug on Solaris, which then shows
" almost no colors. It doesn't seem to work with Eterm on Suse 6.3 either...
"set t_Co=8
"if has("terminfo")
"  set t_AB=[%?%p1%{8}%<%t%p1%{40}%+%e%p1%{92}%+%;%dm
"  set t_AF=[%?%p1%{8}%<%t%p1%{30}%+%e%p1%{82}%+%;%dm
"else
"  set t_Sf=[3%dm
"  set t_Sb=[4%dm
"endif

if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
  set t_Co=16
  set t_Sf=[3%dm
  set t_Sb=[4%dm
endif

" Default is while background
"highlight normal ctermbg=0 ctermfg=7 guibg=black guifg=grey
" Default is some unreadable yellow
"highlight Search term=reverse  ctermbg=4 ctermfg=3  guibg=blue guifg=yellow
" The selection highlight in gvim renders the font unreadable
"highlight Visual gui=reverse guifg=NONE guibg=NONE

" Press space to clear search highlighting and any message already displayed.
nnoremap <silent> <Space> :silent noh<Bar>echo<CR>


set background=dark

" We kind of want color syntaxing in text mode too :-)
if &t_Co > 2 || has("gui_running")
  syntax on
endif

" Really fancy status line from Sven Guckes
" From http://www.vim.org/vimrc
set   statusline=Vim-%{Version()}\ %{getcwd()}\ \ %1*[%02n]%*\ %(%M%R%H%)\ %2*%F%*\ %=%{Options()}\ %3*<%l,%c%V>%*
" Text between "%{" and "%}" is being evaluated and thus suited for functions.
" Here I will use the function "Options()" as defined below to show the
" values of some (local) options..
" The strings "%N*" unto "%*" correspond to the highlight group "UserN":
"       User1: color for buffer number
  hi    User1 cterm=NONE    ctermfg=red    ctermbg=white  guifg=red    guibg=white
"       User2: color for filename
  hi    User2 cterm=NONE    ctermfg=black  ctermbg=green  guifg=black  guibg=green
"       User3: color for position
  hi    User3 cterm=NONE    ctermfg=blue   ctermbg=white  guifg=blue   guibg=white

fu! Version()
        return version
endf

fu! Options()
"           let opt="Opt:"
            let opt=""
  " autoindent
  if &ai|   let opt=opt." ai"   |endif
  "  expandtab
  if &et|   let opt=opt." et"   |endif
  "  hlsearch
  if &hls|  let opt=opt." hls"  |endif
  "  paste
  if &paste|let opt=opt." paste"|endif
  "  shiftwidth
  if &shiftwidth!=8|let opt=opt." sw=".&shiftwidth|endif
  "  textwidth - show always!
  let opt=opt." tw=".&tw
  return opt
endf


" Debian specific stuff
augroup filetype
  au BufRead reportbug.*		set ft=mail
augroup END

" Debian uses compressed helpfiles. We must inform vim that the main
" helpfiles is compressed. Other helpfiles are stated in the tags-file.
set helpfile=$VIMRUNTIME/doc/help.txt.gz

set dictionary+=/usr/share/dict/words
"set encoding=utf-8 fileencodings=
